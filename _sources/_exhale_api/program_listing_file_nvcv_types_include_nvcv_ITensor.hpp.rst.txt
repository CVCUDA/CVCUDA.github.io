
.. _program_listing_file_nvcv_types_include_nvcv_ITensor.hpp:

Program Listing for File ITensor.hpp
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_nvcv_types_include_nvcv_ITensor.hpp>` (``nvcv_types/include/nvcv/ITensor.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * SPDX-FileCopyrightText: Copyright (c) 2022-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
    * SPDX-License-Identifier: Apache-2.0
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #ifndef NVCV_ITENSOR_HPP
   #define NVCV_ITENSOR_HPP
   
   #include "Casts.hpp"
   #include "Tensor.h"
   #include "TensorData.hpp"
   #include "TensorLayout.hpp"
   #include "TensorShape.hpp"
   #include "detail/Optional.hpp"
   
   #include <nvcv/DataType.hpp>
   
   namespace nvcv {
   
   class ITensor
   {
   public:
       using HandleType    = NVCVTensorHandle;
       using BaseInterface = ITensor;
   
       virtual ~ITensor() = default;
   
       HandleType      handle() const;
       static ITensor *cast(HandleType h);
   
       int          rank() const;
       TensorShape  shape() const;
       DataType     dtype() const;
       TensorLayout layout() const;
   
       TensorData exportData() const;
   
       template<typename DerivedTensorData>
       detail::Optional<DerivedTensorData> exportData() const
       {
           return exportData().cast<DerivedTensorData>();
       }
   
       void  setUserPointer(void *ptr);
       void *userPointer() const;
   
   private:
       virtual NVCVTensorHandle doGetHandle() const = 0;
   };
   
   } // namespace nvcv
   
   #include "detail/ITensorImpl.hpp"
   
   #endif // NVCV_ITENSOR_HPP

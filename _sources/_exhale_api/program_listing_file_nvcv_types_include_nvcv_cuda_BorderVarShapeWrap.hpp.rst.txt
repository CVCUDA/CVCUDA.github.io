
.. _program_listing_file_nvcv_types_include_nvcv_cuda_BorderVarShapeWrap.hpp:

Program Listing for File BorderVarShapeWrap.hpp
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file_nvcv_types_include_nvcv_cuda_BorderVarShapeWrap.hpp>` (``nvcv_types/include/nvcv/cuda/BorderVarShapeWrap.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * SPDX-FileCopyrightText: Copyright (c) 2022-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
    * SPDX-License-Identifier: Apache-2.0
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #ifndef NVCV_CUDA_BORDER_VAR_SHAPE_WRAP_HPP
   #define NVCV_CUDA_BORDER_VAR_SHAPE_WRAP_HPP
   
   #include "BorderWrap.hpp"             // for IsOutside, etc.
   #include "ImageBatchVarShapeWrap.hpp" // for ImageBatchVarShapeWrap, etc.
   #include "TypeTraits.hpp"             // for NumElements, etc.
   
   #include <nvcv/IImageBatchData.hpp> // for IImageBatchVarShapeDataStridedCuda, etc.
   
   namespace nvcv::cuda {
   
   namespace detail {
   
   template<typename T, NVCVBorderType B>
   class BorderVarShapeWrapImpl
   {
   public:
       using ImageBatchWrap = ImageBatchVarShapeWrap<T>;
       using ValueType      = typename ImageBatchWrap::ValueType;
   
       static constexpr int            kNumDimensions = ImageBatchWrap::kNumDimensions;
       static constexpr NVCVBorderType kBorderType    = B;
   
       BorderVarShapeWrapImpl() = default;
   
       explicit __host__ __device__ BorderVarShapeWrapImpl(ImageBatchWrap imageBatchWrap)
           : m_imageBatchWrap(imageBatchWrap)
       {
       }
   
       explicit __host__ BorderVarShapeWrapImpl(const IImageBatchVarShapeDataStridedCuda &images)
           : m_imageBatchWrap(images)
       {
       }
   
       inline const __host__ __device__ ImageBatchWrap &imageBatchWrap() const
       {
           return m_imageBatchWrap;
       }
   
   protected:
       const ImageBatchWrap m_imageBatchWrap = {};
   };
   
   } // namespace detail
   
   template<typename T, NVCVBorderType B>
   class BorderVarShapeWrap : public detail::BorderVarShapeWrapImpl<T, B>
   {
       using Base = detail::BorderVarShapeWrapImpl<T, B>;
   
   public:
       using typename Base::ImageBatchWrap;
       using typename Base::ValueType;
   
       using Base::kBorderType;
       using Base::kNumDimensions;
   
       BorderVarShapeWrap() = default;
   
       explicit __host__ __device__ BorderVarShapeWrap(ImageBatchWrap imageBatchWrap, ValueType borderValue = {})
           : Base(imageBatchWrap)
       {
       }
   
       explicit __host__ BorderVarShapeWrap(const IImageBatchVarShapeDataStridedCuda &images, ValueType borderValue = {})
           : Base(images)
       {
       }
   
       // Get the image batch var-shape wrapped by this border var-shape wrap.
       using Base::imageBatchWrap;
   
       inline __host__ __device__ ValueType &operator[](int4 c) const
       {
           return *doGetPtr(c.w, c.z, c.y, c.x);
       }
   
       inline __host__ __device__ ValueType &operator[](int3 c) const
       {
           return *doGetPtr(c.z, 0, c.y, c.x);
       }
   
       inline __host__ __device__ ValueType *ptr(int s, int p, int y, int x) const
       {
           return doGetPtr(s, p, y, x);
       }
   
       inline __host__ __device__ ValueType *ptr(int s, int y, int x) const
       {
           return doGetPtr(s, 0, y, x);
       }
   
   private:
       inline __host__ __device__ ValueType *doGetPtr(int s, int p, int y, int x) const
       {
           y = GetIndexWithBorder<kBorderType>(y, Base::m_imageBatchWrap.height(s, p));
           x = GetIndexWithBorder<kBorderType>(x, Base::m_imageBatchWrap.width(s, p));
           return Base::m_imageBatchWrap.ptr(s, p, y, x);
       }
   };
   
   template<typename T>
   class BorderVarShapeWrap<T, NVCV_BORDER_CONSTANT> : public detail::BorderVarShapeWrapImpl<T, NVCV_BORDER_CONSTANT>
   {
       using Base = detail::BorderVarShapeWrapImpl<T, NVCV_BORDER_CONSTANT>;
   
   public:
       using typename Base::ImageBatchWrap;
       using typename Base::ValueType;
   
       using Base::kBorderType;
       using Base::kNumDimensions;
   
       BorderVarShapeWrap() = default;
   
       explicit __host__ __device__ BorderVarShapeWrap(ImageBatchWrap imageBatchWrap, ValueType borderValue = {})
           : Base(imageBatchWrap)
           , m_borderValue(borderValue)
       {
       }
   
       explicit __host__ BorderVarShapeWrap(const IImageBatchVarShapeDataStridedCuda &images, ValueType borderValue = {})
           : Base(images)
           , m_borderValue(borderValue)
       {
       }
   
       // Get the image batch var-shape wrapped by this border var-shape wrap.
       using Base::imageBatchWrap;
   
       inline __host__ __device__ ValueType &operator[](int4 c) const
       {
           ValueType *p = doGetPtr(c.w, c.z, c.y, c.x);
   
           if (p == nullptr)
           {
               return m_borderValue;
           }
   
           return *p;
       }
   
       inline __host__ __device__ ValueType &operator[](int3 c) const
       {
           ValueType *p = doGetPtr(c.z, 0, c.y, c.x);
   
           if (p == nullptr)
           {
               return m_borderValue;
           }
   
           return *p;
       }
   
       inline __host__ __device__ ValueType *ptr(int s, int p, int y, int x) const
       {
           return doGetPtr(s, p, y, x);
       }
   
       inline __host__ __device__ ValueType *ptr(int s, int y, int x) const
       {
           return doGetPtr(s, 0, y, x);
       }
   
   private:
       inline __host__ __device__ ValueType *doGetPtr(int s, int p, int y, int x) const
       {
           if (IsOutside(y, Base::m_imageBatchWrap.height(s, p)) || IsOutside(x, Base::m_imageBatchWrap.width(s, p)))
           {
               return nullptr;
           }
           return Base::m_imageBatchWrap.ptr(s, p, y, x);
       }
   
       ValueType m_borderValue = SetAll<ValueType>(0);
   };
   
   } // namespace nvcv::cuda
   
   #endif // NVCV_CUDA_BORDER_VAR_SHAPE_WRAP_HPP

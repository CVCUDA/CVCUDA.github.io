
.. _program_listing_file_nvcv_types_include_nvcv_cuda_MathWrappers.hpp:

Program Listing for File MathWrappers.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_nvcv_types_include_nvcv_cuda_MathWrappers.hpp>` (``nvcv_types/include/nvcv/cuda/MathWrappers.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
    * SPDX-License-Identifier: Apache-2.0
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #ifndef NVCV_CUDA_MATH_WRAPPERS_HPP
   #define NVCV_CUDA_MATH_WRAPPERS_HPP
   
   #include "TypeTraits.hpp"              // for Require, etc.
   #include "detail/MathWrappersImpl.hpp" // for MathWrappersImpl, etc.
   
   namespace nvcv::cuda {
   
   namespace detail {
   
   template<typename T, typename U, typename RT>
   inline __host__ __device__ RT RoundImpl(U u)
   {
       RT out{};
   
   #pragma unroll
       for (int e = 0; e < nvcv::cuda::NumElements<RT>; ++e)
       {
           GetElement(out, e) = RoundImpl<T, BaseType<U>>(GetElement(u, e));
       }
   
       return out;
   }
   
   } // namespace detail
   
   template<typename T, typename U, typename RT = ConvertBaseTypeTo<T, U>,
            class = Require<HasTypeTraits<T, U> && !IsCompound<T>>>
   inline __host__ __device__ std::enable_if_t<!std::is_same_v<T, U>, RT> round(U u)
   {
       return detail::RoundImpl<T, U, RT>(u);
   }
   
   template<typename U>
   inline __host__ __device__ U round(U u)
   {
       return detail::RoundImpl<BaseType<U>, U, U>(u);
   }
   
   #define NVCV_CUDA_BINARY_SIMD(TYPE_U, INTRINSIC)                  \
       constexpr(std::is_same_v<U, TYPE_U>)                          \
       {                                                             \
           unsigned int r_a = *reinterpret_cast<unsigned int *>(&a); \
           unsigned int r_b = *reinterpret_cast<unsigned int *>(&b); \
           unsigned int ret = INTRINSIC(r_a, r_b);                   \
           return *reinterpret_cast<TYPE_U *>(&ret);                 \
       }
   
   template<typename U, class = Require<HasTypeTraits<U>>>
   inline __host__ __device__ U min(U a, U b)
   {
       // clang-format off
   #ifdef __CUDA_ARCH__
       if NVCV_CUDA_BINARY_SIMD (short2, __vmins2)
       else if NVCV_CUDA_BINARY_SIMD (char4, __vmins4)
       else if NVCV_CUDA_BINARY_SIMD (ushort2, __vminu2)
       else if NVCV_CUDA_BINARY_SIMD (uchar4, __vminu4)
       else
   #endif
       {
           U out{};
   #pragma unroll
           for (int e = 0; e < nvcv::cuda::NumElements<U>; ++e)
           {
               GetElement(out, e) = detail::MinImpl(GetElement(a, e), GetElement(b, e));
           }
           return out;
       }
       // clang-format on
   }
   
   template<typename U, class = Require<HasTypeTraits<U>>>
   inline __host__ __device__ U max(U a, U b)
   {
       // clang-format off
   #ifdef __CUDA_ARCH__
       if NVCV_CUDA_BINARY_SIMD (short2, __vmaxs2)
       else if NVCV_CUDA_BINARY_SIMD (char4, __vmaxs4)
       else if NVCV_CUDA_BINARY_SIMD (ushort2, __vmaxu2)
       else if NVCV_CUDA_BINARY_SIMD (uchar4, __vmaxu4)
       else
   #endif
       {
           U out{};
   #pragma unroll
           for (int e = 0; e < nvcv::cuda::NumElements<U>; ++e)
           {
               GetElement(out, e) = detail::MaxImpl(GetElement(a, e), GetElement(b, e));
           }
           return out;
       }
       // clang-format on
   }
   
   #undef NVCV_CUDA_BINARY_SIMD
   
   template<typename U, class = Require<HasTypeTraits<U>>>
   inline __host__ __device__ U exp(U u)
   {
       U out{};
   
   #pragma unroll
       for (int e = 0; e < nvcv::cuda::NumElements<U>; ++e)
       {
           GetElement(out, e) = detail::ExpImpl(GetElement(u, e));
       }
   
       return out;
   }
   
   template<typename U, class = Require<HasTypeTraits<U>>>
   inline __host__ __device__ U sqrt(U u)
   {
       U out{};
   
   #pragma unroll
       for (int e = 0; e < nvcv::cuda::NumElements<U>; ++e)
       {
           GetElement(out, e) = detail::SqrtImpl(GetElement(u, e));
       }
   
       return out;
   }
   
   #define NVCV_CUDA_UNARY_SIMD(TYPE_U, INTRINSIC)                   \
       constexpr(std::is_same_v<U, TYPE_U>)                          \
       {                                                             \
           unsigned int r_u = *reinterpret_cast<unsigned int *>(&u); \
           unsigned int ret = INTRINSIC(r_u);                        \
           return *reinterpret_cast<TYPE_U *>(&ret);                 \
       }
   
   template<typename U, class = Require<HasTypeTraits<U>>>
   inline __host__ __device__ U abs(U u)
   {
       // clang-format off
   #ifdef __CUDA_ARCH__
       if NVCV_CUDA_UNARY_SIMD (short2, __vabsss2)
       else if NVCV_CUDA_UNARY_SIMD (char4, __vabsss4)
       else
   #endif
       {
           U out{};
   #pragma unroll
           for (int e = 0; e < nvcv::cuda::NumElements<U>; ++e)
           {
               GetElement(out, e) = detail::AbsImpl(GetElement(u, e));
           }
           return out;
       }
       // clang-format on
   }
   
   #undef NVCV_CUDA_UNARY_SIMD
   
   } // namespace nvcv::cuda
   
   #endif // NVCV_CUDA_MATH_WRAPPERS_HPP
